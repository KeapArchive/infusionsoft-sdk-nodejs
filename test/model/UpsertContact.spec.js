/**
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InfusionsoftRestApi);
  }
}(this, function(expect, InfusionsoftRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InfusionsoftRestApi.UpsertContact();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpsertContact', function() {
    it('should create an instance of UpsertContact', function() {
      // uncomment below and update the code to test UpsertContact
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be.a(InfusionsoftRestApi.UpsertContact);
    });

    it('should have the property addresses (base name: "addresses")', function() {
      // uncomment below and update the code to test the property addresses
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property birthday (base name: "birthday")', function() {
      // uncomment below and update the code to test the property birthday
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "company")', function() {
      // uncomment below and update the code to test the property company
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property contactType (base name: "contact_type")', function() {
      // uncomment below and update the code to test the property contactType
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "custom_fields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "date_created")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property duplicateOption (base name: "duplicate_option")', function() {
      // uncomment below and update the code to test the property duplicateOption
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property emailAddresses (base name: "email_addresses")', function() {
      // uncomment below and update the code to test the property emailAddresses
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property familyName (base name: "family_name")', function() {
      // uncomment below and update the code to test the property familyName
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property faxNumbers (base name: "fax_numbers")', function() {
      // uncomment below and update the code to test the property faxNumbers
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property givenName (base name: "given_name")', function() {
      // uncomment below and update the code to test the property givenName
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property jobTitle (base name: "job_title")', function() {
      // uncomment below and update the code to test the property jobTitle
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "last_updated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property leadSourceId (base name: "lead_source_id")', function() {
      // uncomment below and update the code to test the property leadSourceId
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "middle_name")', function() {
      // uncomment below and update the code to test the property middleName
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property optInReason (base name: "opt_in_reason")', function() {
      // uncomment below and update the code to test the property optInReason
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "owner_id")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumbers (base name: "phone_numbers")', function() {
      // uncomment below and update the code to test the property phoneNumbers
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property preferredLocale (base name: "preferred_locale")', function() {
      // uncomment below and update the code to test the property preferredLocale
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property preferredName (base name: "preferred_name")', function() {
      // uncomment below and update the code to test the property preferredName
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property relationships (base name: "relationships")', function() {
      // uncomment below and update the code to test the property relationships
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property sourceType (base name: "source_type")', function() {
      // uncomment below and update the code to test the property sourceType
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property suffix (base name: "suffix")', function() {
      // uncomment below and update the code to test the property suffix
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property tagIds (base name: "tag_ids")', function() {
      // uncomment below and update the code to test the property tagIds
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "time_zone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instane = new InfusionsoftRestApi.UpsertContact();
      //expect(instance).to.be();
    });

  });

}));
